{"version":3,"sources":["components/Element.js","components/Array.js","components/AlgorithmSelector.js","components/BubbleSort.js","components/InsertionSort.js","components/MergeSort.js","components/StepsContainer.js","components/App.js","serviceWorker.js","index.js"],"names":["Element","value","green","red","className","Array","elements","length","greenIndices","redIndices","map","e","i","key","includes","AlgorithmSelector","active","select","methods","bubble","name","description","source","insertion","merge","Object","keys","k","method","onClick","BubbleSort","array","bubbleSortSteps","steps","arrayCopy","slice","sorted","push","renderBubbleSortSteps","InsertionSort","insertionSortSteps","a","b","renderInsertionSortSteps","MergeSort","mergeSortSteps","slices","divided","step","nextSlices","mid","Math","ceil","merged","x","y","z","renderMergeSortSteps","StepsContainer","show","children","App","useState","sortInput","setSortInput","setElements","selected","setSelected","showSteps","setShowSteps","useEffect","s","trim","split","forEach","n","parseFloat","isNaN","formatInputToArray","sortingAlgorithm","type","onChange","target","placeholder","disabled","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8c6967a9.chunk.js","sourcesContent":["import React from 'react';\n\nconst Element = ({ value, green, red }) => {\n  return (\n    <div className={\n      `border border-gray-500 rounded-lg mx-1 p-6\n      ${green && 'border-green-400 text-green-400'}\n      ${red && 'border-red-500 text-red-500'}\n    `}>\n      {value}\n    </div>\n  );\n};\n\nexport default Element;\n","import React from 'react';\n\nimport Element from './Element';\n\nconst Array = ({ elements, green, red }) => {\n  if (!elements || elements.length === 0) return null;\n\n  const greenIndices = green || [];\n  const redIndices = red || [];\n\n  return (\n    <div className='flex justify-center mx-4 my-6'>\n      {elements.map((e, i) => {\n        return (\n          <Element\n            key={e}\n            value={e}\n            green={greenIndices.includes(i)}\n            red={redIndices.includes(i)}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Array;\n","import React from 'react';\n\nimport './AlgorithmSelector.css';\n\nconst AlgorithmSelector = ({ active, select }) => {\n  const methods = {\n    bubble: {\n      name: 'Bubble Sort',\n      description: 'Bubble sort, sometimes referred to as sinking sort, is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order.',\n      source: 'Wikipedia',\n    },\n    insertion: {\n      name: 'Insertion Sort',\n      description: 'Insertion sort is a simple sorting algorithm that builds the final sorted array (or list) one item at a time.',\n      source: 'Wikipedia',\n    },\n    merge: {\n      name: 'Merge Sort',\n      description: 'Merge Sort is a Divide and Conquer algorithm. It divides input array in two halves, calls itself for the two halves and then merges the two sorted halves.',\n      source: 'GeeksforGeeks',\n    },\n  };\n\n  return (\n    <div>\n      <div className='flex flex-col md:flex-row justify-center items-center mb-4'>\n        {Object.keys(methods).map((k) => {\n          const method = methods[k];\n          return <div\n            key={k}\n            className={`\n              w-40 border hover:border-blue-500 hover:text-blue-500 font-mono m-1 cursor-pointer\n              ${k === active\n                ? 'border-blue-500 text-blue-500'\n                : 'border-black'}\n            `}\n            onClick={() => { select(k) }}\n          >\n            <p>{method.name}</p>\n          </div>\n        })}\n      </div>\n      \n      <div className='w-3/4 mx-auto h-48 md:h-24'>\n        <p>{methods[active].description}</p>\n        <br />\n        <p className='italic'>{methods[active].source}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default AlgorithmSelector;\n","import React from 'react';\n\nimport Array from './Array';\n\nconst BubbleSort = ({ array }) => {\n  const renderBubbleSortSteps = () => {    \n    const steps = [];\n    const arrayCopy = array.slice();\n    while (true) {\n      let sorted = true;\n      for (let i = 0; i < arrayCopy.length - 1; i++) {\n        if (arrayCopy[i] > arrayCopy[i+1]) {\n          sorted = false;\n          [arrayCopy[i], arrayCopy[i+1]] = [arrayCopy[i+1], arrayCopy[i]];\n          steps.push(\n            <div className='flex justify-center'>\n              <Array elements={arrayCopy.slice()} green={[i]} red={[i+1]} />\n            </div>\n          );\n        } else {\n          steps.push(\n            <div className='flex justify-center'>\n              <Array elements={arrayCopy.slice()} green={[i]} />\n            </div>\n          );\n        }\n      }\n      if (sorted) break;\n    };\n    return steps;\n  };\n\n  const bubbleSortSteps = renderBubbleSortSteps();\n\n  return (\n    <div>\n      {bubbleSortSteps}\n    </div>\n  );\n};\n\nexport default BubbleSort;\n","import React from 'react';\n\nimport Array from './Array';\n\nconst InsertionSort = ({ array }) => {\n  const renderInsertionSortSteps = () => {\n    const steps = [];\n    const arrayCopy = array.slice();\n    for (let i = 1; i < arrayCopy.length; i++) {\n      if (arrayCopy[i] < arrayCopy[i-1]) {\n        let a = i;\n        let b = i - 1;\n        const red = [];\n        while (a > 0 && arrayCopy[a] < arrayCopy[b]) {\n          [arrayCopy[a], arrayCopy[b]] = [arrayCopy[b], arrayCopy[a]];\n          red.push(a);\n          a--;\n          b--;\n        }\n        const green = [a];\n        steps.push(\n          <div className='flex justify-center'>\n            <Array elements={arrayCopy.slice()} green={green} red={red} />\n          </div>\n        );\n      } else {\n        steps.push(\n          <div className='flex justify-center'>\n            <Array elements={arrayCopy.slice()} green={[i]} />\n          </div>\n        );\n      }\n    }\n    return steps;\n  };\n\n  const insertionSortSteps = renderInsertionSortSteps();\n\n  return (\n    <div>\n      {insertionSortSteps}\n    </div>\n  );\n};\n\nexport default InsertionSort;\n","import React from 'react';\n\nimport Array from './Array';\n\nconst MergeSort = ({ array }) => {\n  const renderMergeSortSteps = () => {\n    const steps = [];\n\n    // divide array into subarrays\n    const arrayCopy = array.slice();\n    let slices = [[0, arrayCopy.length]];\n    let divided = false;\n    while (!divided) {\n      divided = true;\n      const step = [];\n      const nextSlices = [];\n      for (const slice of slices) {\n        const mid = Math.ceil((slice[0] + slice[1]) / 2);\n        const a = [slice[0], mid];\n        const b = [mid, slice[1]];\n\n        if (a[1] - a[0] > 1 || b[1] - b[0] > 1) divided = false;\n\n        if (a[1] - a[0] > 0) {\n          step.push(<Array elements={arrayCopy.slice(a[0] , a[1])} />);\n          nextSlices.push(a);\n        }\n        if (b[1] - b[0] > 0) {\n          step.push(<Array elements={arrayCopy.slice(b[0] , b[1])} />);\n          nextSlices.push(b);\n        }          \n      }\n      steps.push(<div className='flex justify-center'>{step}</div>);\n      slices = nextSlices;\n    }\n\n    // merge subarrays\n    while (slices.length > 1) {\n      const step = [];\n      const nextSlices = [];\n      for (let i = 0; i < slices.length; i += 2) {        \n        if (slices.length - i < 2) {\n          const slice = slices[i];\n          step.push(<Array elements={arrayCopy.slice(slice[0], slice[1])} />);\n          nextSlices.push(slice);\n        } else {\n          const a = slices[i];\n          const b = slices[i+1];\n          const merged = [];\n          let x = a[0];\n          let y = b[0];\n          while (x < a[1] && y < b[1]) {\n            if (arrayCopy[x] <= arrayCopy[y]) {\n              merged.push(arrayCopy[x]);\n              x++;\n            } else {\n              merged.push(arrayCopy[y]);\n              y++;\n            }\n          }\n          while (x < a[1]) {\n            merged.push(arrayCopy[x]);\n            x++;\n          }\n          while (y < b[1]) {\n            merged.push(arrayCopy[y]);\n            y++;\n          }\n\n          let z = 0;\n          while (a[0] + z < b[1]) {\n            arrayCopy[a[0] + z] = merged[z];\n            z++;\n          }\n\n          step.push(<Array elements={merged} />);\n          nextSlices.push([a[0], b[1]]);\n        }\n      }\n      steps.push(<div className='flex justify-center'>{step}</div>);\n      slices = nextSlices;\n    }\n\n    return steps;\n  };\n\n  const mergeSortSteps = renderMergeSortSteps();\n\n  return (\n    <div>\n      {mergeSortSteps}\n    </div>\n  );\n};\n\nexport default MergeSort;\n","import React from 'react';\n\nimport './StepsContainer.css';\n\nconst StepsContainer = ({ show, children }) => {\n  if (show)\n    return (\n      <div className='relative mb-32 overflow-y-hidden'>\n        {children}\n        <div className='screen' />\n      </div>\n    );\n\n  return null;\n};\n\nexport default StepsContainer;\n","import React, { useState, useEffect } from 'react';\nimport '../tailwind.generated.css';\n\nimport './App.css';\nimport Array from './Array';\nimport AlgorithmSelector from './AlgorithmSelector';\nimport BubbleSort from './BubbleSort';\nimport InsertionSort from './InsertionSort';\nimport MergeSort from './MergeSort';\nimport StepsContainer from './StepsContainer';\n\nconst App = () => {\n  const [sortInput, setSortInput] = useState('');\n  const [elements, setElements] = useState([]);\n  const [selected, setSelected] = useState('bubble');\n  const [showSteps, setShowSteps] = useState(false);\n\n  const formatInputToArray = (s) => {\n    const elements = [];\n    const strings = s.trim().split(',');\n\n    strings.forEach((s) => {\n      const n = parseFloat(s);\n      if (!isNaN(n)) elements.push(n);\n    });\n\n    setElements(elements);\n  };\n  useEffect(() => { formatInputToArray(sortInput) }, [sortInput]);\n\n  useEffect(() => { setShowSteps(false); }, [sortInput, selected]);\n\n  const handleSortInput = (e) => {\n    setSortInput(e.target.value);\n    // setShowSteps(false);\n  };\n\n  let sortingAlgorithm;\n  switch (selected) {\n    case 'bubble':\n    default:\n      sortingAlgorithm = <BubbleSort array={elements} />;\n      break;\n    case 'insertion':\n      sortingAlgorithm = <InsertionSort array={elements} />;\n      break;\n    case 'merge':\n      sortingAlgorithm = <MergeSort array={elements} />;\n      break;\n  }\n\n  return (\n    <div className=\"App\">\n      <div className='container mx-auto text-center'>\n        <h1 className='font-mono text-3xl mt-16 md:mt-56 mb-8'>\n          Sort Visualizer\n        </h1>\n\n        <AlgorithmSelector active={selected} select={setSelected} />\n\n        <div className='my-8'>\n          <p>Enter a list of comma-separated numbers to sort.</p>\n          <div\n            className={`\n              border border-gray-400 h-8 w-3/4 rounded-full mx-auto px-4\n            `}\n          >\n            <input\n              type='text'\n              onChange={handleSortInput}\n              value={sortInput}\n              placeholder='e.g. 1,2,3,4,5'\n              className='h-full w-full text-center'            \n            />\n          </div>\n        </div>\n\n        <button\n          className={`\n            sort-button border font-mono w-16 mb-8\n            ${elements.length\n              ? 'border-black hover:border-blue-500 hover:text-blue-500'\n              : 'border-gray-500 text-gray-500 cursor-not-allowed'}\n          `}\n          disabled={!elements.length}\n          onClick={() => { setShowSteps(true) }}\n        >\n          Sort\n        </button>\n\n        {!!elements.length &&\n          <Array elements={elements} />}\n\n        <StepsContainer show={showSteps}>\n          {sortingAlgorithm}\n        </StepsContainer>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}